import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.1.1'
	}
}

apply plugin: 'application'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

jar {
	enabled = true
}

project.archivesBaseName = 'spring-boot-sample-app'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

ext {
	commonLang3Version = '3.11'
	jacocoToolVersion = '0.8.7'
	junitJupiterVersion = '5.9.2'
}
repositories {
	mavenCentral()
	/*maven {
		name = 'ph-packages'
		url = uri('https://maven.pkg.github.com/bring/ph-omn-common-lib')
		credentials {
			username = System.getenv('GITHUB_ACTOR')
			password = System.getenv('GITHUB_REPO_TOKEN')
		}
	}*/
}
dependencies {
	implementation 'com.fasterxml.woodstox:woodstox-core:6.4.0'
	implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'org.postgresql:postgresql:42.4.1'
	implementation 'io.micrometer:micrometer-core'

	implementation 'com.fasterxml.woodstox:woodstox-core:6.4.0'

	implementation 'jakarta.activation:jakarta.activation-api:2.1.0'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
/*	implementation 'io.micrometer:micrometer-core'
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.brave:brave'*/


	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation('io.micrometer:micrometer-tracing-bridge-brave')
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave' //May not required



	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework:spring-core:6.0.4'
	implementation 'org.yaml:snakeyaml:2.0'

	testImplementation 'org.apache.kafka:kafka_2.13'
	testImplementation 'org.apache.kafka:kafka-clients'

	implementation('io.netty:netty-codec') {
		version {
			strictly '4.1.85.Final'
		}
	}


	testImplementation 'org.apache.kafka:kafka_2.13'
	testImplementation 'org.apache.kafka:kafka-clients'
	testImplementation 'org.awaitility:awaitility'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitJupiterVersion
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:postgresql:1.17.6'
	testImplementation 'org.testcontainers:testcontainers:1.17.6'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'


	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitJupiterVersion
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true
	}
	reports {
		junitXml.required = true
	}
}

jacoco() {
	toolVersion = jacocoToolVersion
}

jacocoTestReport() {
	reports {
		html.required = true
		xml.required = true
		csv.required = true
	}
	afterEvaluate {
		getClassDirectories().setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [

					'**/*Application**',
			])
		}))
	}
}